/*
 * PRESENT_with_updated_Sboxes.asm
 *  A PRESENT implementation with side-channel resistant S-boxes
 *  Based on: On Using Genetic Algorithms for Intrinsic Side-Channel Resistance: The Case of AES S-Box - Digital Security Nijmegen
 *  Initial paper: PRESENT: An Ultra-Lightweight Block Cipher - A. Bogdanov, L.R. Knudsen, G. Leander, C. Paar, A. Poschmann,
 *  M.J.B. Robshaw, Y. Seurin, and C. Vikkelsoe
 *  Created: 25-Nov-13 2:28:23 PM
 *   Author: Kostas Papagiannopoulos - Digital Security Nijmegen
 *   Mail: kostaspap88@gmail.com
 *	 This code is available under the MIT licence (see below)
 */ 

/*Copyright (c) 2013 Kostas Papagiannopoulos

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/

.include "tn45def.inc"

//key
.def k0=r0
.def k1=r1	
.def k2=r2
.def k3=r3
.def k4=r4
.def k5=r5
.def k6=r6
.def k7=r7
.def k8=r8
.def k9=r9

//shifted key
.def k10=r10
.def k11=r11

//cipher state
.def s0=r21
.def s1=r22
.def s2=r23
.def s3=r24
.def s4=r25
.def s5=r26
.def s6=r27
.def s7=r28

//new cipher state (after P-layer)
.def ns0=r12
.def ns1=r13
.def ns2=r14
.def ns3=r15
.def ns4=r16
.def ns5=r17
.def ns6=r18
.def ns7=r19

//counter
.def counter=r29

  
.org 0x0200

sbox256:
/* ORIGINAL Sbox -- exactly as in PRESENT */
/*
.db 0xCC, 0xC5, 0xC6, 0xCB, 0xC9, 0xC0, 0xCA, 0xCD, 0xC3, 0xCE, 0xCF, 0xC8, 0xC4, 0xC7, 0xC1, 0xC2
.db 0x5C, 0x55, 0x56, 0x5B, 0x59, 0x50, 0x5A, 0x5D, 0x53, 0x5E, 0x5F, 0x58, 0x54, 0x57, 0x51, 0x52
.db 0x6C, 0x65, 0x66, 0x6B, 0x69, 0x60, 0x6A, 0x6D, 0x63, 0x6E, 0x6F, 0x68, 0x64, 0x67, 0x61, 0x62
.db 0xBC, 0xB5, 0xB6, 0xBB, 0xB9, 0xB0, 0xBA, 0xBD, 0xB3, 0xBE, 0xBF, 0xB8, 0xB4, 0xB7, 0xB1, 0xB2
.db 0x9C, 0x95, 0x96, 0x9B, 0x99, 0x90, 0x9A, 0x9D, 0x93, 0x9E, 0x9F, 0x98, 0x94, 0x97, 0x91, 0x92
.db 0x0C, 0x05, 0x06, 0x0B, 0x09, 0x00, 0x0A, 0x0D, 0x03, 0x0E, 0x0F, 0x08, 0x04, 0x07, 0x01, 0x02
.db 0xAC, 0xA5, 0xA6, 0xAB, 0xA9, 0xA0, 0xAA, 0xAD, 0xA3, 0xAE, 0xAF, 0xA8, 0xA4, 0xA7, 0xA1, 0xA2
.db 0xDC, 0xD5, 0xD6, 0xDB, 0xD9, 0xD0, 0xDA, 0xDD, 0xD3, 0xDE, 0xDF, 0xD8, 0xD4, 0xD7, 0xD1, 0xD2
.db 0x3C, 0x35, 0x36, 0x3B, 0x39, 0x30, 0x3A, 0x3D, 0x33, 0x3E, 0x3F, 0x38, 0x34, 0x37, 0x31, 0x32
.db 0xEC, 0xE5, 0xE6, 0xEB, 0xE9, 0xE0, 0xEA, 0xED, 0xE3, 0xEE, 0xEF, 0xE8, 0xE4, 0xE7, 0xE1, 0xE2
.db 0xFC, 0xF5, 0xF6, 0xFB, 0xF9, 0xF0, 0xFA, 0xFD, 0xF3, 0xFE, 0xFF, 0xF8, 0xF4, 0xF7, 0xF1, 0xF2
.db 0x8C, 0x85, 0x86, 0x8B, 0x89, 0x80, 0x8A, 0x8D, 0x83, 0x8E, 0x8F, 0x88, 0x84, 0x87, 0x81, 0x82
.db 0x4C, 0x45, 0x46, 0x4B, 0x49, 0x40, 0x4A, 0x4D, 0x43, 0x4E, 0x4F, 0x48, 0x44, 0x47, 0x41, 0x42
.db 0x7C, 0x75, 0x76, 0x7B, 0x79, 0x70, 0x7A, 0x7D, 0x73, 0x7E, 0x7F, 0x78, 0x74, 0x77, 0x71, 0x72
.db 0x1C, 0x15, 0x16, 0x1B, 0x19, 0x10, 0x1A, 0x1D, 0x13, 0x1E, 0x1F, 0x18, 0x14, 0x17, 0x11, 0x12
.db 0x2C, 0x25, 0x26, 0x2B, 0x29, 0x20, 0x2A, 0x2D, 0x23, 0x2E, 0x2F, 0x28, 0x24, 0x27, 0x21, 0x22
*/
/* Updated Sbox with better transparency */
.db 0x66, 0x65, 0x69, 0x6D, 0x6C, 0x60, 0x67, 0x6F, 0x6A, 0x6B, 0x62, 0x64, 0x6E, 0x63, 0x61, 0x68 
.db 0x56, 0x55, 0x59, 0x5D, 0x5C, 0x50, 0x57, 0x5F, 0x5A, 0x5B, 0x52, 0x54, 0x5E, 0x53, 0x51, 0x58 
.db 0x96, 0x95, 0x99, 0x9D, 0x9C, 0x90, 0x97, 0x9F, 0x9A, 0x9B, 0x92, 0x94, 0x9E, 0x93, 0x91, 0x98 
.db 0xD6, 0xD5, 0xD9, 0xDD, 0xDC, 0xD0, 0xD7, 0xDF, 0xDA, 0xDB, 0xD2, 0xD4, 0xDE, 0xD3, 0xD1, 0xD8 
.db 0xC6, 0xC5, 0xC9, 0xCD, 0xCC, 0xC0, 0xC7, 0xCF, 0xCA, 0xCB, 0xC2, 0xC4, 0xCE, 0xC3, 0xC1, 0xC8 
.db 0x06, 0x05, 0x09, 0x0D, 0x0C, 0x00, 0x07, 0x0F, 0x0A, 0x0B, 0x02, 0x04, 0x0E, 0x03, 0x01, 0x08 
.db 0x76, 0x75, 0x79, 0x7D, 0x7C, 0x70, 0x77, 0x7F, 0x7A, 0x7B, 0x72, 0x74, 0x7E, 0x73, 0x71, 0x78 
.db 0xF6, 0xF5, 0xF9, 0xFD, 0xFC, 0xF0, 0xF7, 0xFF, 0xFA, 0xFB, 0xF2, 0xF4, 0xFE, 0xF3, 0xF1, 0xF8 
.db 0xA6, 0xA5, 0xA9, 0xAD, 0xAC, 0xA0, 0xA7, 0xAF, 0xAA, 0xAB, 0xA2, 0xA4, 0xAE, 0xA3, 0xA1, 0xA8 
.db 0xB6, 0xB5, 0xB9, 0xBD, 0xBC, 0xB0, 0xB7, 0xBF, 0xBA, 0xBB, 0xB2, 0xB4, 0xBE, 0xB3, 0xB1, 0xB8 
.db 0x26, 0x25, 0x29, 0x2D, 0x2C, 0x20, 0x27, 0x2F, 0x2A, 0x2B, 0x22, 0x24, 0x2E, 0x23, 0x21, 0x28 
.db 0x46, 0x45, 0x49, 0x4D, 0x4C, 0x40, 0x47, 0x4F, 0x4A, 0x4B, 0x42, 0x44, 0x4E, 0x43, 0x41, 0x48 
.db 0xE6, 0xE5, 0xE9, 0xED, 0xEC, 0xE0, 0xE7, 0xEF, 0xEA, 0xEB, 0xE2, 0xE4, 0xEE, 0xE3, 0xE1, 0xE8 
.db 0x36, 0x35, 0x39, 0x3D, 0x3C, 0x30, 0x37, 0x3F, 0x3A, 0x3B, 0x32, 0x34, 0x3E, 0x33, 0x31, 0x38 
.db 0x16, 0x15, 0x19, 0x1D, 0x1C, 0x10, 0x17, 0x1F, 0x1A, 0x1B, 0x12, 0x14, 0x1E, 0x13, 0x11, 0x18 
.db 0x86, 0x85, 0x89, 0x8D, 0x8C, 0x80, 0x87, 0x8F, 0x8A, 0x8B, 0x82, 0x84, 0x8E, 0x83, 0x81, 0x88 


sbox256_half:
/* ORIGINAL half Sbox -- exactly as in PRESENT */
/*
.db 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF
.db 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F
.db 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F
.db 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF
.db 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F
.db 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
.db 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF
.db 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF
.db 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F
.db 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF
.db 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
.db 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F
.db 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F
.db 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F
.db 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
.db 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F
*/
/* Updated Sbox with better transparency */
.db 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f 
.db 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f 
.db 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f 
.db 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDa, 0xDb, 0xDc, 0xDd, 0xDe, 0xDf 
.db 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCa, 0xCb, 0xCc, 0xCd, 0xCe, 0xCf 
.db 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f 
.db 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f 
.db 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFa, 0xFb, 0xFc, 0xFd, 0xFe, 0xFf 
.db 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAa, 0xAb, 0xAc, 0xAd, 0xAe, 0xAf 
.db 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBa, 0xBb, 0xBc, 0xBd, 0xBe, 0xBf 
.db 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f 
.db 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f 
.db 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEa, 0xEb, 0xEc, 0xEd, 0xEe, 0xEf 
.db 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f 
.db 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f 
.db 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f 



.macro update_key

inc counter /* Increase counter */

/* Key XOR counter */
lsl counter
lsl counter
eor k5,counter
lsr counter
lsr counter

/* 61 rotations to left = 19 rotations to the right = 2*(8bit moves) +
3 bit rotation right */


/* 2*8 bit rotation is done easily with mov */
mov k11,k9
mov k10,k8
/* key is stored in k2, k3, ... ,k11 */

/* Perform 3 rotations to the right */

/* 1st rotation */
/* clear k1 which will work as a temp */
eor k8,k8

lsr k10
ror k11
ror k0
ror k1
ror k2
ror k3
ror k4
ror k5
ror k6
ror k7

ror k8
or k10,k8

/*2nd rot*/
eor k8,k8

lsr k10
ror k11
ror k0
ror k1
ror k2
ror k3
ror k4
ror k5
ror k6
ror k7

ror k8
or k10,k8

/*3rd rot*/
eor k8,k8

lsr k10
ror k11
ror k0
ror k1
ror k2
ror k3
ror k4
ror k5
ror k6
ror k7

ror k8
or k10,k8



/* key is stored in k2, k3, ... ,k11. I should probably move it back to k0,k1,k2,....,k9 */
mov k9,k7
mov k8,k6
mov k7,k5
mov k6,k4
mov k5,k3
mov k4,k2
mov k3,k1
mov k2,k0
mov k1,k11
mov k0,k10

/* SBox on key bits 76,77,78,79 i.e. high part of register r11 (k11) */

ldi ZH, high(2*sbox256_half)
mov ZL,k0
lpm k0,Z

.endmacro

.macro slayer

ldi ZH, 0x04
mov ZL, s0
lpm s0, Z
mov ZL, s1
lpm s1, Z
mov ZL, s2
lpm s2, Z
mov ZL, s3
lpm s3, Z
mov ZL, s4
lpm s4, Z
mov ZL, s5
lpm s5, Z
mov ZL, s6
lpm s6, Z
mov ZL, s7
lpm s7, Z
.endmacro

.macro player
bst s0,0
bld ns0,0
bst s0,1
bld ns2,0
bst s0,2
bld ns4,0
bst s0,3
bld ns6,0
bst s0,4
bld ns0,1
bst s0,5
bld ns2,1
bst s0,6
bld ns4,1
bst s0,7
bld ns6,1
bst s1,0
bld ns0,2
bst s1,1
bld ns2,2
bst s1,2
bld ns4,2
bst s1,3
bld ns6,2
bst s1,4
bld ns0,3
bst s1,5
bld ns2,3
bst s1,6
bld ns4,3
bst s1,7
bld ns6,3
bst s2,0
bld ns0,4
bst s2,1
bld ns2,4
bst s2,2
bld ns4,4
bst s2,3
bld ns6,4
bst s2,4
bld ns0,5
bst s2,5
bld ns2,5
bst s2,6
bld ns4,5
bst s2,7
bld ns6,5
bst s3,0
bld ns0,6
bst s3,1
bld ns2,6
bst s3,2
bld ns4,6
bst s3,3
bld ns6,6
bst s3,4
bld ns0,7
bst s3,5
bld ns2,7
bst s3,6
bld ns4,7
bst s3,7
bld ns6,7
bst s4,0
bld ns1,0
bst s4,1
bld ns3,0
bst s4,2
bld ns5,0
bst s4,3
bld ns7,0
bst s4,4
bld ns1,1
bst s4,5
bld ns3,1
bst s4,6
bld ns5,1
bst s4,7
bld ns7,1
bst s5,0
bld ns1,2
bst s5,1
bld ns3,2
bst s5,2
bld ns5,2
bst s5,3
bld ns7,2
bst s5,4
bld ns1,3
bst s5,5
bld ns3,3
bst s5,6
bld ns5,3
bst s5,7
bld ns7,3
bst s6,0
bld ns1,4
bst s6,1
bld ns3,4
bst s6,2
bld ns5,4
bst s6,3
bld ns7,4
bst s6,4
bld ns1,5
bst s6,5
bld ns3,5
bst s6,6
bld ns5,5
bst s6,7
bld ns7,5
bst s7,0
bld ns1,6
bst s7,1
bld ns3,6
bst s7,2
bld ns5,6
bst s7,3
bld ns7,6
bst s7,4
bld ns1,7
bst s7,5
bld ns3,7
bst s7,6
bld ns5,7
bst s7,7
bld ns7,7
.endmacro

.macro addroundkey
eor s0,k7
eor s1,k6
eor s2,k5
eor s3,k4
eor s4,k3
eor s5,k2
eor s6,k1
eor s7,k0
.endmacro

/* start of program. */
.org 0x00



/* load a key value here IMPORTANT! order for key is MostSignificant byte (k0) to least significant byte (k9)*/
// To load the same plaintext in Bochum_debug C code do this: uint8_t key[] =	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03};
ldi r16,0x03
mov k0,r16
ldi r16,0x00
mov k1,r16
ldi r16,0x00
mov k2,r16
ldi r16,0x00
mov k3,r16
ldi r16,0x00
mov k4,r16
ldi r16,0x00
mov k5,r16
ldi r16,0x00
mov k6,r16
ldi r16,0x00
mov k7,r16
ldi r16,0x00
mov k8,r16
ldi r16,0x00
mov k9,r16

/* end of key initialization IMPORTANT! order for text is leastSignificant byte (s0) to most significant byte (s7)*/

/* load a plaintext value here */
// To load the same plaintext in Bochum_debug C code do this: volatile uint8_t state[] = {0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00};
ldi r16,0x07
mov s0,r16
ldi r16,0x00
mov s1,r16
ldi r16,0x00
mov s2,r16
ldi r16,0x00
mov s3,r16
ldi r16,0x00
mov s4,r16
ldi r16,0x00
mov s5,r16
ldi r16,0x00
mov s6,r16
ldi r16,0x00
mov s7,r16

/* end of plaintext initialization */


/* initialize counter */
ldi counter, 0x00

GO_GO_PRESENT:
/* AddRoundKey */
addroundkey

/* S-layer */
slayer
/* P-layer */
player
/* Key update */
update_key

/* Move new_state (ns) to old_state (s) */
mov s0,ns0
mov s1,ns1
mov s2,ns2
mov s3,ns3
mov s4,ns4
mov s5,ns5
mov s6,ns6
mov s7,ns7


cpi counter,0x1F
brne ONE_MORE_ROUND

FINAL_XOR:

addroundkey

rjmp PRESENT_END


ONE_MORE_ROUND:
rjmp GO_GO_PRESENT


PRESENT_END:
// Here is the end
//result is stored in r21 (LeastSignificantByte) until r28 (MostSignificantByte)
eor r31, r31